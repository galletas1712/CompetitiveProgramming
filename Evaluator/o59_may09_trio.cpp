/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <bits/stdc++.h>
using namespace std;
#define long long long
const long MOD = 1e9+7, LINF = 1e18 + 1e16;
const int INF = 1e9+1;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
const int N = 501;

class Trio {
    int n, lz_row, lz_col;
    vector<tuple<int,int,int> > ans;

    int cnt[N][N];
    void inc(int x, int y) {
        if(!(1 <= x && x <= n && 1 <= y && y <= n && x >= y)) {
            cerr << "invalid index " << x << ' ' << y << endl;
        }
        ++cnt[x][y];
    }
    void check_answer() {
        for(auto tt: ans) {
            int x, y, z;
            tie(x, y, z) = tt;
            x += lz_row, y += lz_col;
            if(z == 1) {
                inc(x, y);
                inc(x-1, y);
                inc(x, y+1);
            }
            if(z == 2) {
                inc(x, y);
                inc(x+1, y);
                inc(x, y+1);
            }
            if(z == 3) {
                inc(x, y);
                inc(x+1, y);
                inc(x, y-1);
            }
            if(z == 4) {
                inc(x, y);
                inc(x-1, y);
                inc(x, y-1);
            }
        }
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= i; j++) {
                if(!cnt[i][j]) cerr << "missing " << i << ' ' << j << endl;
                else if(cnt[i][j] > 1) cerr << "over " << i << ' ' << j << endl;
            }
            for(int j = i+1; j <= n; j++) {
                if(cnt[i][j]) {
                    cerr << "stray " << i << ' ' << j << endl;
                }
            }
        }
        for(int i = 1; i <= n; i++, cerr << endl) {
            for(int j = 1; j <= n; j++, cerr << ' ') {
                cerr<< cnt[i][j];
            }
        }
    }

    void add(int x, int y, int z) {
//        cerr << "add " << x << ' ' << y << ' ' << z << endl;
        x -= lz_row;
        y -= lz_col;
        ans.emplace_back(x, y, z);
    }
    void two_even_reduction(int i) {
        lz_row += 2;
        lz_col += 2;
        for(int j = 2; j <= i; ) {
            if(j % 3 == 2) {
                add(j, 1, 1);
                ++j;
            } else {
                add(j, 2, 3);
                j += 2;
            }
        }
    }
    void two_odd_reduction(int i) {
        lz_row += 2;
        for(int j = 2; j <= i; ) {
            if(j % 3 == 2) {
                add(j, j - 1, 1);
                ++j;
            } else {
                add(j, j, 3);
                j += 2;
            }
        }
    }
    void four_reduction(int i) {
        lz_row += 2;
        lz_col += 2;
        for(int j = 2; j <= i - 4; ) {
            if(j % 3 == 2) {
                add(j, 1, 1);
                ++j;
            } else {
                add(j, 2, 3);
                j += 2;
            }
        }
        add(i - 3, 1, 2);
        add(i, 4, 4);
        add(i, 1, 1);
        add(i-1, 2, 1);
        for(int j = 5; j <= i - 1; ) {
            if(j % 3 == 2) {
                add(i, j, 1);
                j += 2;
            } else {
                add(i - 1, j, 3);
                ++j;
            }
        }
    }
    void solve_even(int n) {
        add(2, 1, 1);
        for(int i = 6; i <= n; i++) {
            if(i % 6 == 2) {
                two_even_reduction(i);
            } else if(i % 6 == 0) {
                four_reduction(i);
            }
        }
    }
    void solve_odd(int n) {
        assert(n >= 9);
        add(2, 1, 1);
        add(3, 1, 2);
        add(5, 1, 2);
        add(9, 1, 1);
        add(7, 2, 3);
        add(4, 3, 4);
        add(6, 3, 4);
        add(8, 3, 2);
        add(5, 4, 1);
        add(7, 4, 4);
        add(6, 5, 2);
        add(9, 5, 4);
        add(7, 6, 2);
        add(9, 7, 4);
        add(9, 8, 1);
        for(int i = 11; i <= n; i += 2) {
            if(i % 6 == 5) {
                two_odd_reduction(i);
            } else if(i % 6 == 3) {
                four_reduction(i);
            }
        }
    }
public:
    void solve(istream &cin, ostream &cout) {
        cin >> n;
        if(n % 6 == 1 || n % 6 == 4 || n == 3 || n == 5 || n == 7) {
            cout << "NO";
            return;
        }
        if(n % 6 == 2 || n % 6 == 0) solve_even(n);
        else solve_odd(n);
        assert(ans.size() == n * (n + 1) / 6);
        for(auto tt: ans) {
            int x, y, z;
            tie(x, y, z) = tt;
            cout << x + lz_row << ' ' << y + lz_col << ' ' << z << '\n';
        }
    }
};

class Solver {
public:
    void solve(std::istream& in, std::ostream& out) {
        Trio *obj = new Trio();
        obj->solve(in, out);
        delete obj;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    Solver solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
