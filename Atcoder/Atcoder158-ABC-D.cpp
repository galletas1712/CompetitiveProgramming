/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <bits/stdc++.h>
using namespace std;

/* TYPES */
#define long int64_t
#define all(v) v.begin(), v.end()
#define fs first
#define sc second
typedef pair<int,int> pii;
typedef pair<int64_t,int> pli;
typedef pair<int64_t,int64_t> pll;
typedef vector<int> vi;
typedef vector<pair<int,int> > vpi;
typedef vector<string> vs;
typedef vector<vector<int> > vvi;
typedef vector<vector<int64_t> > vvl;

/* CONSTANTS */
const long MOD = 1e9+7, LINF = 1e18 + 1e16;
const int INF = 1e9+1;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

/* FUNCTIONS */
template<typename T, typename U> inline void setMin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void setMax(T &x, U y) { if(x < y) x = y; }
template<typename T>
inline T gcd(T a, T b) {
    T c;
    while(b) c = b, b = a % b, a = c;
    return a;
}
template<typename T>
inline T square(T a) { return a*a; }

class TaskD {

    deque<char> receive_string_and_convert(istream &cin, ostream &cout) {
        string S;
        cin >> S;
        deque<char> dq;
        dq.insert(dq.end(), S.begin(), S.end());
        return dq;
    }

public:
    void solve(istream &cin, ostream &cout) {
        deque<char> dq = receive_string_and_convert(cin, cout);
        bool state = 0;

        int Q;
        cin >> Q;
        for (int _i = 0; _i < Q; _i++) {
            int T;
            cin >> T;
            if (T == 1) {
                state ^= 1;
            } else {
                int F;
                char C;
                cin >> F >> C;
                --F;
                if (F ^ state) {
                    dq.push_back(C);
                } else {
                    dq.push_front(C);
                }
            }
        }

        string result = "";
        while (!dq.empty()) {
            result += dq.front();
            dq.pop_front();
        }
        if (state) {
            reverse(result.begin(), result.end());
        }
        cout << result << endl;
    }
};


class Solver {
public:
    void solve(std::istream& in, std::ostream& out) {
        TaskD *obj = new TaskD();
        obj->solve(in, out);
        delete obj;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    Solver solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
