/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author szawinis
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
#define long long long
const long MOD = 1e9+7, LINF = 1e18 + 1e16;
const int INF = 1e9+1;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
const int N = 105;

class TJ_D {
private:
	int n;
	int A[N];
	vector<pii> que;
	int pos[N];
	int ret[N];
	void genpos() {
		for(int i = 1; i <= n; ++i) pos[A[i]] = i;
	}
	void swp(int l, int r) {
		que.emplace_back(l, r);
		int ptr = 1;
		for(int i = r+1; i <= n; ++i) ret[ptr++] = A[i];
		for(int i = l; i <= r; ++i) ret[ptr++] = A[i];
		for(int i = 1; i < l; ++i) ret[ptr++] = A[i];
		for(int i = 1; i <= n; ++i) A[i] = ret[i];
		genpos();
	}
public:
	void solve(istream& cin, ostream& cout) {
		cin >> n;
		vector<pii> vec;
		for(int i = 1; i <= n; ++i) {
			cin >> A[i];
			vec.emplace_back(A[i], i);
		}
		sort(vec.begin(), vec.end());
		for(int i = 0; i < vec.size(); ++i) A[vec[i].y] = i+1;
		genpos();
		if(A[1] != 1)
			swp(1, pos[1]-1);
		for(int i = 2; i < n; ++i) {
			if(A[i] == i) continue;
			swp(i, pos[i]-1);
			swp(1, n-i+1);
		}
		cout << que.size() << endl;
		for(auto x : que) cout << x.x << ' ' << x.y << endl;
	}
};

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	TJ_D solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
